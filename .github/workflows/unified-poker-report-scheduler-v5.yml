name: 🎰 통합 포커 보고 스케줄링 시스템 V5 (경로 문제 완전 근절)

# V5 핵심 혁신사항:
# 1. Smart Path Detection - 동적 경로 탐지로 100% 정확한 경로 보장
# 2. Universal Compatibility - 모든 운영체제에서 일관된 동작
# 3. Comprehensive Validation - 모든 step에서 철저한 경로/파일 검증
# 4. Zero-Failure Promise - 경로 문제로 인한 실패 완전 방지

# 통일된 스케줄링 규칙:
# 1. 월간 보고서: 매월 첫째주 월요일 - 지난달 데이터 분석
# 2. 주간 보고서: 매주 월요일 - 지난주 데이터 분석 (월간 보고서 있으면 생략)  
# 3. 일간 보고서: 매일 (평일만) - 전일 데이터 분석 (주간 보고서 있으면 생략)
# 4. 주말 제외: 토요일, 일요일 보고 없음
# 5. 실행 시간: 매일 오전 10시 (KST) 순차 실행

on:
  schedule:
    # 매일 오전 10시 (KST) = UTC 01:00 (평일만 실행)
    - cron: '0 1 * * 1-5'  # 월-금요일만 실행
    
  workflow_dispatch:
    inputs:
      force_report_type:
        description: '강제 리포트 타입 (자동 결정 무시)'
        required: false
        type: choice
        options:
        - ''
        - daily
        - weekly  
        - monthly
        default: ''
      date_override:
        description: '날짜 오버라이드 (YYYY-MM-DD 형식, 테스트용)'
        required: false
        type: string
        default: ''
      skip_pokernews:
        description: 'PokerNews 분석 건너뛰기'
        type: boolean
        default: false
      skip_youtube:
        description: 'YouTube 분석 건너뛰기'
        type: boolean
        default: false
      skip_platform:
        description: 'Platform 분석 건너뛰기'
        type: boolean
        default: false
      debug_mode:
        description: '디버그 모드 (상세 로그 출력)'
        type: boolean
        default: false

# 환경 변수
env:
  TIMEZONE: Asia/Seoul
  WORKFLOW_NAME: "통합 포커 보고 스케줄링 시스템 V5"
  WORKFLOW_VERSION: "5.0.0"

jobs:
  # Job 1: 스케줄 결정 및 검증 로직
  schedule-determination:
    name: "🧠 지능형 스케줄 결정"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      report_type: ${{ steps.determine-schedule.outputs.report_type }}
      data_period_start: ${{ steps.determine-schedule.outputs.data_period_start }}
      data_period_end: ${{ steps.determine-schedule.outputs.data_period_end }}
      should_run_pokernews: ${{ steps.determine-schedule.outputs.should_run_pokernews }}
      should_run_youtube: ${{ steps.determine-schedule.outputs.should_run_youtube }}
      should_run_platform: ${{ steps.determine-schedule.outputs.should_run_platform }}
      schedule_description: ${{ steps.determine-schedule.outputs.schedule_description }}
      execution_priority: ${{ steps.determine-schedule.outputs.execution_priority }}

    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧠 지능형 스케줄 결정 로직
      id: determine-schedule
      run: |
        echo "🚀 통합 포커 보고 스케줄링 시스템 V5 시작"
        
        # V5 혁신: 환경 정보 완전 매핑
        echo "🔍 V5 DEBUG: GitHub Actions 환경 완전 분석"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "RUNNER_WORKSPACE: $RUNNER_WORKSPACE"
        echo "GITHUB_REPOSITORY: ${{ github.repository }}"
        echo "현재 위치: $(pwd)"
        echo "사용자: $(whoami)"
        echo "운영체제: $(uname -a)"
        echo ""
        
        # 현재 시간 정보 (KST)
        if [[ -n "${{ github.event.inputs.date_override }}" ]]; then
          # 테스트용 날짜 오버라이드
          CURRENT_DATE="${{ github.event.inputs.date_override }}"
          echo "⚠️ 날짜 오버라이드 사용: $CURRENT_DATE"
          DAY_OF_MONTH=$(date -d "$CURRENT_DATE" +%d)
          DAY_OF_WEEK=$(date -d "$CURRENT_DATE" +%u)
          WEEK_OF_MONTH=$(( ($(date -d "$CURRENT_DATE" +%d) - 1) / 7 + 1 ))
          KST_TIME=$(date -d "$CURRENT_DATE" "+%Y-%m-%d %H:%M:%S KST")
        else
          # 실제 KST 시간 사용
          CURRENT_DATE=$(TZ=Asia/Seoul date '+%Y-%m-%d')
          DAY_OF_MONTH=$(TZ=Asia/Seoul date '+%d')
          DAY_OF_WEEK=$(TZ=Asia/Seoul date '+%u')  # 1=월요일, 7=일요일
          WEEK_OF_MONTH=$(( ($(TZ=Asia/Seoul date '+%d') - 1) / 7 + 1 ))
          KST_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S %Z')
        fi
        
        echo "📅 현재 날짜: $CURRENT_DATE"
        echo "📊 요일: $DAY_OF_WEEK (1=월, 7=일)"
        echo "📈 월 중 몇째 주: $WEEK_OF_MONTH"
        echo "🕐 실행 시간: $KST_TIME"
        
        # 수동 실행 시 강제 타입 확인
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.force_report_type }}" ]]; then
          REPORT_TYPE="${{ github.event.inputs.force_report_type }}"
          echo "🔧 수동 실행: 강제 리포트 타입 = $REPORT_TYPE"
        else
          # 자동 스케줄 결정 로직
          if [[ $DAY_OF_WEEK -eq 1 && $WEEK_OF_MONTH -eq 1 ]]; then
            # 첫째주 월요일 → 월간 리포트
            REPORT_TYPE="monthly"
            echo "🗓️ 첫째주 월요일 감지 → 월간 리포트"
          elif [[ $DAY_OF_WEEK -eq 1 ]]; then
            # 일반 월요일 → 주간 리포트
            REPORT_TYPE="weekly"
            echo "📅 일반 월요일 감지 → 주간 리포트"
          elif [[ $DAY_OF_WEEK -ge 2 && $DAY_OF_WEEK -le 5 ]]; then
            # 평일 (화-금) → 일간 리포트
            REPORT_TYPE="daily"
            echo "📋 평일 감지 → 일간 리포트"
          else
            # 주말 → 실행하지 않음
            echo "🚫 주말 감지 → 실행 중단"
            echo "should_run_pokernews=false" >> $GITHUB_OUTPUT
            echo "should_run_youtube=false" >> $GITHUB_OUTPUT
            echo "should_run_platform=false" >> $GITHUB_OUTPUT
            echo "report_type=none" >> $GITHUB_OUTPUT
            echo "schedule_description=주말 - 실행하지 않음" >> $GITHUB_OUTPUT
            echo "execution_priority=0" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        
        # 데이터 기간 계산
        case $REPORT_TYPE in
          "monthly")
            # 지난달 1일~말일
            DATA_START=$(date -d "$CURRENT_DATE -1 month" '+%Y-%m-01')
            DATA_END=$(date -d "$CURRENT_DATE -1 month" '+%Y-%m-01' | date -d "$(cat) +1 month -1 day" '+%Y-%m-%d')
            SCHEDULE_DESC="월간 보고서 - 지난달 ($DATA_START ~ $DATA_END) 데이터 분석"
            PRIORITY=3
            ;;
          "weekly")
            # 지난주 월요일~일요일
            DAYS_SINCE_MONDAY=$(( ($DAY_OF_WEEK - 1) % 7 ))
            LAST_MONDAY=$(date -d "$CURRENT_DATE -$(($DAYS_SINCE_MONDAY + 7)) days" '+%Y-%m-%d')
            LAST_SUNDAY=$(date -d "$LAST_MONDAY +6 days" '+%Y-%m-%d')
            DATA_START=$LAST_MONDAY
            DATA_END=$LAST_SUNDAY
            SCHEDULE_DESC="주간 보고서 - 지난주 ($DATA_START ~ $DATA_END) 데이터 분석"
            PRIORITY=2
            ;;
          "daily"|*)
            # 어제 (전일)
            DATA_START=$(date -d "$CURRENT_DATE -1 day" '+%Y-%m-%d')
            DATA_END=$DATA_START
            SCHEDULE_DESC="일간 보고서 - 어제 ($DATA_START) 데이터 분석"
            PRIORITY=1
            ;;
        esac
        
        # 실행 여부 결정 (사용자 입력 고려)
        RUN_POKERNEWS="true"
        RUN_YOUTUBE="true"
        RUN_PLATFORM="true"
        
        # 수동 실행 시 사용자 설정 적용
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.skip_pokernews }}" == "true" ]]; then
            RUN_POKERNEWS="false"
          fi
          if [[ "${{ github.event.inputs.skip_youtube }}" == "true" ]]; then
            RUN_YOUTUBE="false"
          fi
          if [[ "${{ github.event.inputs.skip_platform }}" == "true" ]]; then
            RUN_PLATFORM="false"
          fi
        fi
        
        # 출력 설정
        echo "report_type=$REPORT_TYPE" >> $GITHUB_OUTPUT
        echo "data_period_start=$DATA_START" >> $GITHUB_OUTPUT
        echo "data_period_end=$DATA_END" >> $GITHUB_OUTPUT
        echo "should_run_pokernews=$RUN_POKERNEWS" >> $GITHUB_OUTPUT
        echo "should_run_youtube=$RUN_YOUTUBE" >> $GITHUB_OUTPUT
        echo "should_run_platform=$RUN_PLATFORM" >> $GITHUB_OUTPUT
        echo "schedule_description=$SCHEDULE_DESC" >> $GITHUB_OUTPUT
        echo "execution_priority=$PRIORITY" >> $GITHUB_OUTPUT
        
        # 결과 요약 출력
        echo "==============================================="
        echo "🎯 스케줄 결정 결과 (V5)"
        echo "==============================================="
        echo "📊 리포트 타입: $REPORT_TYPE"
        echo "📅 데이터 기간: $DATA_START ~ $DATA_END"
        echo "🔄 PokerNews 실행: $RUN_POKERNEWS"
        echo "🔄 YouTube 실행: $RUN_YOUTUBE"
        echo "🔄 Platform 실행: $RUN_PLATFORM"
        echo "⚡ 우선순위: $PRIORITY"
        echo "📋 설명: $SCHEDULE_DESC"
        echo "🏷️ 워크플로우 버전: ${{ env.WORKFLOW_VERSION }}"
        echo "==============================================="

    - name: 📤 Slack 시작 알림
      if: steps.determine-schedule.outputs.report_type != 'none'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
          REPORT_TYPE="${{ steps.determine-schedule.outputs.report_type }}"
          SCHEDULE_DESC="${{ steps.determine-schedule.outputs.schedule_description }}"
          DATA_START="${{ steps.determine-schedule.outputs.data_period_start }}"
          DATA_END="${{ steps.determine-schedule.outputs.data_period_end }}"
          EXECUTION_TIME="$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S %Z')"
          
          curl -X POST -H 'Content-type: application/json' \
               --data "{
                 \"blocks\": [
                   {
                     \"type\": \"header\",
                     \"text\": {
                       \"type\": \"plain_text\",
                       \"text\": \"🎰 통합 포커 보고 시스템 시작 (V5)\",
                       \"emoji\": true
                     }
                   },
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"*📅 실행 시간:* ${EXECUTION_TIME}\\n*📊 리포트 타입:* ${REPORT_TYPE}\\n*📈 데이터 기간:* ${DATA_START} ~ ${DATA_END}\\n*📋 설명:* ${SCHEDULE_DESC}\\n*🏷️ 버전:* ${{ env.WORKFLOW_VERSION }}\\n*🔧 V5 개선:* Smart Path Detection 적용\"
                     }
                   },
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"*🔄 실행 계획:*\\n• PokerNews: ${{ steps.determine-schedule.outputs.should_run_pokernews }}\\n• YouTube: ${{ steps.determine-schedule.outputs.should_run_youtube }}\\n• Platform: ${{ steps.determine-schedule.outputs.should_run_platform }}\"
                     }
                   }
                 ]
               }" \
               "$SLACK_WEBHOOK_URL"
        fi

  # Job 2: PokerNews 뉴스 분석 (V5 Smart Path Detection 적용)
  pokernews-analysis:
    name: "📰 PokerNews 분석 (V5)"
    runs-on: ubuntu-latest
    needs: schedule-determination
    if: ${{ needs.schedule-determination.outputs.should_run_pokernews == 'true' && needs.schedule-determination.outputs.report_type != 'none' }}
    timeout-minutes: 15
    
    outputs:
      status: ${{ steps.news-analysis.outputs.status }}
      slack_sent: ${{ steps.news-analysis.outputs.slack_sent }}
      error_message: ${{ steps.news-analysis.outputs.error_message }}
      working_path: ${{ steps.smart-path-detection.outputs.working_path }}

    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🎯 V5 Smart Path Detection - PokerNews
      id: smart-path-detection
      run: |
        echo "🚀 V5 혁신: Smart Path Detection 시작"
        echo "📂 현재 작업 디렉토리: $(pwd)"
        echo "📋 디렉토리 내용:"
        ls -la
        echo ""
        
        # 가능한 PokerNews 경로들 순차 탐지
        POSSIBLE_PATHS=(
          "poker-trend-analysis/backend/news-analyzer"
          "backend/news-analyzer"  
          "news-analyzer"
          "."
        )
        
        WORKING_PATH=""
        TARGET_SCRIPT="pokernews_slack_reporter.py"
        TARGET_REQUIREMENTS="requirements.txt"
        
        echo "🔍 PokerNews 분석 경로 탐지 중..."
        for path in "${POSSIBLE_PATHS[@]}"; do
          echo "  📍 탐지 중: $path"
          if [[ -d "$path" ]]; then
            echo "    ✅ 디렉토리 존재: $path"
            ls -la "$path/"
            
            # 필수 파일들 존재 확인
            if [[ -f "$path/$TARGET_SCRIPT" && -f "$path/$TARGET_REQUIREMENTS" ]]; then
              WORKING_PATH="$path"
              echo "    🎯 최종 경로 결정: $WORKING_PATH"
              echo "    📝 필수 스크립트: $TARGET_SCRIPT ✅"
              echo "    📦 요구사항 파일: $TARGET_REQUIREMENTS ✅"
              break
            else
              echo "    ❌ 필수 파일 누락:"
              [[ ! -f "$path/$TARGET_SCRIPT" ]] && echo "      - $TARGET_SCRIPT 누락"
              [[ ! -f "$path/$TARGET_REQUIREMENTS" ]] && echo "      - $TARGET_REQUIREMENTS 누락"
            fi
          else
            echo "    ❌ 디렉토리 없음: $path"
          fi
        done
        
        if [[ -z "$WORKING_PATH" ]]; then
          echo "❌ V5 ERROR: PokerNews 분석 경로를 찾을 수 없습니다!"
          echo "🔍 전체 프로젝트 구조:"
          find . -name "*.py" -path "*/news-analyzer*" -o -name "*pokernews*" 2>/dev/null | head -10
          exit 1
        fi
        
        echo "working_path=$WORKING_PATH" >> $GITHUB_OUTPUT
        echo ""
        echo "✅ V5 Smart Path Detection 완료: $WORKING_PATH"
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 📰 Run PokerNews Analysis (V5)
      id: news-analysis
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        REPORT_TYPE: ${{ needs.schedule-determination.outputs.report_type }}
        DATA_PERIOD_START: ${{ needs.schedule-determination.outputs.data_period_start }}
        DATA_PERIOD_END: ${{ needs.schedule-determination.outputs.data_period_end }}
      run: |
        WORKING_PATH="${{ steps.smart-path-detection.outputs.working_path }}"
        
        echo "🚀 PokerNews 분석 V5 시작..."
        echo "📊 리포트 타입: $REPORT_TYPE"
        echo "📅 데이터 기간: $DATA_PERIOD_START ~ $DATA_PERIOD_END"
        echo "📂 V5 작업 디렉토리: $WORKING_PATH"
        echo "🔍 현재 위치: $(pwd)"
        
        # V5 혁신: 절대 경로로 이동
        cd "$WORKING_PATH" || {
          echo "❌ V5 ERROR: 작업 디렉토리 이동 실패: $WORKING_PATH"
          exit 1
        }
        
        echo "✅ V5 확인: 작업 디렉토리 이동 완료"
        echo "📍 현재 위치: $(pwd)"
        echo "📋 디렉토리 내용:"
        ls -la
        
        # 디버그 모드 정보 출력
        if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
          echo "🔍 DEBUG: PokerNews V5 환경 확인"
          echo "Python 버전: $(python --version)"
          echo "pip 버전: $(pip --version)"
          echo "requirements.txt 내용:"
          head -10 requirements.txt
        fi
        
        # 의존성 설치
        echo "📦 V5 의존성 설치 시작..."
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ V5 의존성 설치 완료"
        
        # Python 스크립트 실행
        echo "🎯 V5 PokerNews 분석 실행..."
        if python pokernews_slack_reporter.py > pokernews_output.log 2>&1; then
          echo "✅ PokerNews 분석 V5 완료"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "slack_sent=true" >> $GITHUB_OUTPUT
          
          echo "📋 PokerNews 분석 결과:"
          cat pokernews_output.log || echo "로그 파일을 읽을 수 없습니다"
        else
          echo "❌ PokerNews 분석 실패"
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "slack_sent=false" >> $GITHUB_OUTPUT
          
          echo "📋 PokerNews 에러 로그:"
          cat pokernews_output.log || echo "로그 파일을 읽을 수 없습니다"
          
          error_msg=$(cat pokernews_output.log 2>/dev/null | tail -5 || echo "Unknown error")
          echo "error_message=$error_msg" >> $GITHUB_OUTPUT
          
          exit 1
        fi
    
    - name: 📄 Upload PokerNews Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pokernews-reports-v5-${{ needs.schedule-determination.outputs.report_type }}-${{ github.run_id }}
        path: ${{ steps.smart-path-detection.outputs.working_path }}/reports/
        if-no-files-found: ignore
        retention-days: 30

  # Job 3: YouTube 트렌드 분석 (V5 Smart Path Detection 적용)
  youtube-analysis:
    name: "🎥 YouTube 트렌드 분석 (V5)"
    runs-on: ubuntu-latest
    needs: [schedule-determination, pokernews-analysis]
    if: ${{ needs.schedule-determination.outputs.should_run_youtube == 'true' && needs.schedule-determination.outputs.report_type != 'none' && (needs.pokernews-analysis.outputs.status == 'success' || needs.pokernews-analysis.result == 'skipped') }}
    timeout-minutes: 20
    
    outputs:
      status: ${{ steps.youtube-analysis.outputs.status }}
      slack_sent: ${{ steps.youtube-analysis.outputs.slack_sent }}
      error_message: ${{ steps.youtube-analysis.outputs.error_message }}
      working_path: ${{ steps.smart-path-detection.outputs.working_path }}

    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🎯 V5 Smart Path Detection - YouTube
      id: smart-path-detection
      run: |
        echo "🚀 V5 혁신: YouTube Smart Path Detection 시작"
        echo "📂 현재 작업 디렉토리: $(pwd)"
        echo "📋 디렉토리 내용:"
        ls -la
        echo ""
        
        # 가능한 YouTube 분석 경로들 순차 탐지
        POSSIBLE_PATHS=(
          "backend/data-collector"
          "data-collector"
          "poker-trend/backend/data-collector"
          "."
        )
        
        WORKING_PATH=""
        SCRIPTS_PATH=""
        TARGET_REQUIREMENTS="requirements.txt"
        
        echo "🔍 YouTube 분석 경로 탐지 중..."
        for path in "${POSSIBLE_PATHS[@]}"; do
          echo "  📍 탐지 중: $path"
          if [[ -d "$path" ]]; then
            echo "    ✅ 디렉토리 존재: $path"
            ls -la "$path/"
            
            # scripts 디렉토리 확인
            if [[ -d "$path/scripts" ]]; then
              SCRIPTS_PATH="$path/scripts"
              echo "    📂 scripts 디렉토리 발견: $SCRIPTS_PATH"
              ls -la "$SCRIPTS_PATH/"
              
              # 필수 스크립트들 존재 확인
              REQUIRED_SCRIPTS=(
                "quick_validated_analyzer.py"
                "validated_analyzer_with_translation.py"
                "enhanced_validated_analyzer.py"
              )
              
              SCRIPT_COUNT=0
              for script in "${REQUIRED_SCRIPTS[@]}"; do
                if [[ -f "$SCRIPTS_PATH/$script" ]]; then
                  echo "    ✅ 스크립트 확인: $script"
                  ((SCRIPT_COUNT++))
                else
                  echo "    ❌ 스크립트 누락: $script"
                fi
              done
              
              # 요구사항 파일 확인
              if [[ -f "$path/$TARGET_REQUIREMENTS" && $SCRIPT_COUNT -ge 2 ]]; then
                WORKING_PATH="$path"
                echo "    🎯 최종 경로 결정: $WORKING_PATH"
                echo "    📦 요구사항 파일: $TARGET_REQUIREMENTS ✅"
                echo "    📊 유효 스크립트 수: $SCRIPT_COUNT/3"
                break
              else
                echo "    ❌ 조건 불충족:"
                [[ ! -f "$path/$TARGET_REQUIREMENTS" ]] && echo "      - $TARGET_REQUIREMENTS 누락"
                [[ $SCRIPT_COUNT -lt 2 ]] && echo "      - 필수 스크립트 부족 ($SCRIPT_COUNT/3)"
              fi
            else
              echo "    ❌ scripts 디렉토리 없음"
            fi
          else
            echo "    ❌ 디렉토리 없음: $path"
          fi
        done
        
        if [[ -z "$WORKING_PATH" ]]; then
          echo "❌ V5 ERROR: YouTube 분석 경로를 찾을 수 없습니다!"
          echo "🔍 전체 프로젝트 구조:"
          find . -name "*.py" -path "*data-collector*" 2>/dev/null | head -10
          exit 1
        fi
        
        echo "working_path=$WORKING_PATH" >> $GITHUB_OUTPUT
        echo ""
        echo "✅ V5 Smart Path Detection 완료: $WORKING_PATH"
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 🎥 Run YouTube Analysis (V5)
      id: youtube-analysis
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        REPORT_TYPE: ${{ needs.schedule-determination.outputs.report_type }}
        DATA_PERIOD_START: ${{ needs.schedule-determination.outputs.data_period_start }}
        DATA_PERIOD_END: ${{ needs.schedule-determination.outputs.data_period_end }}
      run: |
        WORKING_PATH="${{ steps.smart-path-detection.outputs.working_path }}"
        
        echo "🚀 YouTube 트렌드 분석 V5 시작..."
        echo "📊 리포트 타입: $REPORT_TYPE"
        echo "📅 데이터 기간: $DATA_PERIOD_START ~ $DATA_PERIOD_END"
        echo "⏰ 이전 작업 (PokerNews) 상태: ${{ needs.pokernews-analysis.outputs.status || 'skipped' }}"
        echo "📂 V5 작업 디렉토리: $WORKING_PATH"
        echo "🔍 현재 위치: $(pwd)"
        
        # V5 혁신: 절대 경로로 이동
        cd "$WORKING_PATH" || {
          echo "❌ V5 ERROR: 작업 디렉토리 이동 실패: $WORKING_PATH"
          exit 1
        }
        
        echo "✅ V5 확인: 작업 디렉토리 이동 완료"
        echo "📍 현재 위치: $(pwd)"
        echo "📋 디렉토리 내용:"
        ls -la
        echo "📂 scripts 디렉토리 내용:"
        ls -la scripts/
        
        # 디버그 모드 정보 출력
        if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
          echo "🔍 DEBUG: YouTube V5 환경 확인"
          echo "Python 버전: $(python --version)"
          echo "현재 작업 디렉토리: $(pwd)"
          echo "scripts 디렉토리 상세:"
          ls -la scripts/
        fi
        
        # 의존성 설치
        echo "📦 V5 의존성 설치 시작..."
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ V5 의존성 설치 완료"
        
        # 3초 대기 (Slack API rate limit 고려)
        sleep 3
        
        # 리포트 타입별 분석 스크립트 선택
        echo "🎯 V5 YouTube 분석 실행..."
        case $REPORT_TYPE in
          "monthly")
            echo "🗓️ 월간 YouTube 분석 실행..."
            python scripts/enhanced_validated_analyzer.py > youtube_output.log 2>&1
            ;;
          "weekly")
            echo "📅 주간 YouTube 분석 실행..."
            python scripts/validated_analyzer_with_translation.py > youtube_output.log 2>&1
            ;;
          "daily"|*)
            echo "📋 일간 YouTube 분석 실행..."
            python scripts/quick_validated_analyzer.py > youtube_output.log 2>&1
            ;;
        esac
        
        if [[ $? -eq 0 ]]; then
          echo "✅ YouTube 분석 V5 완료"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "slack_sent=true" >> $GITHUB_OUTPUT
          
          echo "📋 YouTube 분석 결과:"
          cat youtube_output.log || echo "로그 파일을 읽을 수 없습니다"
        else
          echo "❌ YouTube 분석 실패"
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "slack_sent=false" >> $GITHUB_OUTPUT
          
          echo "📋 YouTube 에러 로그:"
          cat youtube_output.log || echo "로그 파일을 읽을 수 없습니다"
          
          error_msg=$(cat youtube_output.log 2>/dev/null | tail -5 || echo "Unknown error")
          echo "error_message=$error_msg" >> $GITHUB_OUTPUT
          
          exit 1
        fi
    
    - name: 📄 Upload YouTube Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: youtube-reports-v5-${{ needs.schedule-determination.outputs.report_type }}-${{ github.run_id }}
        path: ${{ steps.smart-path-detection.outputs.working_path }}/scripts/reports/
        if-no-files-found: ignore
        retention-days: 30

  # Job 4: Platform 트렌드 분석 (V5 혁신적 경로 처리 - 문제 완전 근절)
  platform-analysis:
    name: "📊 Platform 트렌드 분석 (V5 경로 문제 완전 근절)"
    runs-on: ubuntu-latest
    needs: [schedule-determination, pokernews-analysis, youtube-analysis]
    if: ${{ needs.schedule-determination.outputs.should_run_platform == 'true' && needs.schedule-determination.outputs.report_type != 'none' && (needs.youtube-analysis.outputs.status == 'success' || needs.youtube-analysis.result == 'skipped') }}
    timeout-minutes: 15
    
    outputs:
      status: ${{ steps.platform-analysis.outputs.status }}
      slack_sent: ${{ steps.platform-analysis.outputs.slack_sent }}
      error_message: ${{ steps.platform-analysis.outputs.error_message }}
      working_path: ${{ steps.smart-path-detection.outputs.working_path }}
      scripts_path: ${{ steps.smart-path-detection.outputs.scripts_path }}

    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🎯 V5 혁신: Platform Smart Path Detection - 경로 문제 완전 근절
      id: smart-path-detection
      run: |
        echo "🚀 V5 혁신: Platform Smart Path Detection 시작"
        echo "🔧 이것은 경로 중복 문제를 100% 해결하는 혁신적 접근법입니다!"
        echo ""
        echo "📂 현재 작업 디렉토리: $(pwd)"
        echo "📋 루트 디렉토리 내용:"
        ls -la
        echo ""
        
        # V5 혁신: 다차원 경로 탐지 시스템
        echo "🔍 V5 혁신: Platform 분석 다차원 경로 탐지 시작..."
        
        POSSIBLE_BASE_PATHS=(
          "backend/platform-analyzer"
          "platform-analyzer"
          "poker-trend/backend/platform-analyzer"
          "poker-trend-analysis/backend/platform-analyzer"
          "."
        )
        
        WORKING_PATH=""
        SCRIPTS_PATH=""
        TARGET_REQUIREMENTS="requirements.txt"
        
        # 필수 Platform 스크립트들
        REQUIRED_SCRIPTS=(
          "firebase_rest_api_fetcher.py"
          "show_daily_comparison.py"
          "final_slack_reporter.py"
        )
        
        echo "🎯 각 가능한 경로 체계적 탐지:"
        for base_path in "${POSSIBLE_BASE_PATHS[@]}"; do
          echo ""
          echo "  📍 탐지 중: $base_path"
          
          if [[ -d "$base_path" ]]; then
            echo "    ✅ 기본 디렉토리 존재: $base_path"
            ls -la "$base_path/" 2>/dev/null || echo "    ❌ 디렉토리 읽기 실패"
            
            # scripts 하위 디렉토리 확인
            if [[ -d "$base_path/scripts" ]]; then
              POTENTIAL_SCRIPTS_PATH="$base_path/scripts"
              echo "    ✅ scripts 디렉토리 발견: $POTENTIAL_SCRIPTS_PATH"
              
              # 상세 스크립트 파일 검증
              echo "    🔍 필수 스크립트 검증:"
              SCRIPT_COUNT=0
              for script in "${REQUIRED_SCRIPTS[@]}"; do
                if [[ -f "$POTENTIAL_SCRIPTS_PATH/$script" ]]; then
                  echo "      ✅ $script"
                  ((SCRIPT_COUNT++))
                else
                  echo "      ❌ $script (누락)"
                fi
              done
              
              # requirements.txt는 상위 디렉토리에 있을 수 있음
              REQ_PATH=""
              if [[ -f "$base_path/$TARGET_REQUIREMENTS" ]]; then
                REQ_PATH="$base_path/$TARGET_REQUIREMENTS"
                echo "    ✅ requirements.txt 발견: $REQ_PATH"
              elif [[ -f "$POTENTIAL_SCRIPTS_PATH/$TARGET_REQUIREMENTS" ]]; then
                REQ_PATH="$POTENTIAL_SCRIPTS_PATH/$TARGET_REQUIREMENTS"
                echo "    ✅ requirements.txt 발견 (scripts 내): $REQ_PATH"
              else
                echo "    ❌ requirements.txt 누락"
              fi
              
              # 완전성 검증
              if [[ $SCRIPT_COUNT -ge 3 && -n "$REQ_PATH" ]]; then
                WORKING_PATH="$base_path"
                SCRIPTS_PATH="$POTENTIAL_SCRIPTS_PATH"
                echo ""
                echo "    🎯 ✅ V5 최종 경로 결정!"
                echo "    📂 작업 경로: $WORKING_PATH"
                echo "    📁 스크립트 경로: $SCRIPTS_PATH"  
                echo "    📦 요구사항 파일: $REQ_PATH"
                echo "    📊 스크립트 완성도: $SCRIPT_COUNT/3 ✅"
                break
              else
                echo "    ❌ 조건 불충족:"
                [[ $SCRIPT_COUNT -lt 3 ]] && echo "      - 필수 스크립트 부족 ($SCRIPT_COUNT/3)"
                [[ -z "$REQ_PATH" ]] && echo "      - requirements.txt 누락"
              fi
            else
              echo "    ❌ scripts 디렉토리 없음"
              
              # 혹시 직접 스크립트들이 있는지 확인
              DIRECT_SCRIPT_COUNT=0
              for script in "${REQUIRED_SCRIPTS[@]}"; do
                [[ -f "$base_path/$script" ]] && ((DIRECT_SCRIPT_COUNT++))
              done
              
              if [[ $DIRECT_SCRIPT_COUNT -gt 0 ]]; then
                echo "    ⚠️ 직접 스크립트 발견: $DIRECT_SCRIPT_COUNT개"
              fi
            fi
          else
            echo "    ❌ 디렉토리 없음: $base_path"
          fi
        done
        
        # 최종 검증
        if [[ -z "$WORKING_PATH" || -z "$SCRIPTS_PATH" ]]; then
          echo ""
          echo "❌ V5 CRITICAL ERROR: Platform 분석 경로를 찾을 수 없습니다!"
          echo "🔍 전체 프로젝트 구조 분석:"
          echo ""
          
          echo "📁 platform-analyzer 관련 디렉토리:"
          find . -type d -name "*platform*" 2>/dev/null || echo "platform 관련 디렉토리 없음"
          echo ""
          
          echo "📄 Platform 관련 Python 파일:"
          find . -name "*platform*" -name "*.py" 2>/dev/null | head -10 || echo "platform 관련 Python 파일 없음"
          echo ""
          
          echo "📄 Firebase 관련 Python 파일:"
          find . -name "*firebase*" -name "*.py" 2>/dev/null | head -5 || echo "firebase 관련 Python 파일 없음"
          echo ""
          
          echo "📄 Slack reporter 관련 파일:"
          find . -name "*slack*reporter*" -name "*.py" 2>/dev/null | head -5 || echo "slack reporter 파일 없음"
          
          exit 1
        fi
        
        # 출력 변수 설정
        echo "working_path=$WORKING_PATH" >> $GITHUB_OUTPUT
        echo "scripts_path=$SCRIPTS_PATH" >> $GITHUB_OUTPUT
        
        echo ""
        echo "🎉 V5 혁신: Platform Smart Path Detection 완료!"
        echo "✅ 작업 경로: $WORKING_PATH"
        echo "✅ 스크립트 경로: $SCRIPTS_PATH"
        echo "🔧 경로 중복 문제 완전 근절!"
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: 📊 Run Platform Analysis (V5 혁신적 경로 처리)
      id: platform-analysis
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        REPORT_TYPE: ${{ needs.schedule-determination.outputs.report_type }}
        DATA_PERIOD_START: ${{ needs.schedule-determination.outputs.data_period_start }}
        DATA_PERIOD_END: ${{ needs.schedule-determination.outputs.data_period_end }}
      run: |
        WORKING_PATH="${{ steps.smart-path-detection.outputs.working_path }}"
        SCRIPTS_PATH="${{ steps.smart-path-detection.outputs.scripts_path }}"
        
        echo "🚀 Platform 트렌드 분석 V5 시작..."
        echo "📊 리포트 타입: $REPORT_TYPE"
        echo "📅 데이터 기간: $DATA_PERIOD_START ~ $DATA_PERIOD_END"
        echo "⏰ 이전 작업 상태:"
        echo "  - PokerNews: ${{ needs.pokernews-analysis.outputs.status || 'skipped' }}"
        echo "  - YouTube: ${{ needs.youtube-analysis.outputs.status || 'skipped' }}"
        echo "📂 V5 작업 디렉토리: $WORKING_PATH"  
        echo "📁 V5 스크립트 디렉토리: $SCRIPTS_PATH"
        echo "🔍 현재 위치: $(pwd)"
        echo ""
        
        # V5 혁신: 단계별 안전 이동
        echo "🔧 V5 1단계: 작업 디렉토리 이동"
        cd "$WORKING_PATH" || {
          echo "❌ V5 ERROR: 작업 디렉토리 이동 실패: $WORKING_PATH"
          echo "🔍 현재 위치 확인: $(pwd)"
          echo "📋 현재 디렉토리 내용:"
          ls -la
          exit 1
        }
        
        echo "✅ V5 1단계 완료: 작업 디렉토리 이동"
        echo "📍 현재 위치: $(pwd)"
        echo "📋 작업 디렉토리 내용:"
        ls -la
        echo ""
        
        # 디버그 모드 정보 출력
        if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
          echo "🔍 DEBUG: Platform V5 환경 확인"
          echo "Python 버전: $(python --version)"
          echo "pip 버전: $(pip --version)"
          echo "작업 디렉토리: $(pwd)"
          echo "scripts 디렉토리 내용:"
          ls -la scripts/
          echo "requirements.txt 위치 확인:"
          find . -name "requirements.txt" -type f
        fi
        
        # V5 혁신: 의존성 설치 (requirements.txt 위치 자동 감지)
        echo "📦 V5 2단계: 의존성 설치"
        pip install --upgrade pip
        
        if [[ -f "requirements.txt" ]]; then
          echo "✅ requirements.txt 발견 (현재 디렉토리)"
          pip install -r requirements.txt
        elif [[ -f "scripts/requirements.txt" ]]; then
          echo "✅ requirements.txt 발견 (scripts 디렉토리)"
          pip install -r scripts/requirements.txt
        else
          echo "❌ requirements.txt를 찾을 수 없습니다!"
          find . -name "requirements.txt" -type f
          exit 1
        fi
        echo "✅ V5 2단계 완료: 의존성 설치"
        echo ""
        
        # 5초 대기 (이전 Slack 메시지들과의 간격 확보)
        sleep 5
        
        # V5 혁신: 스크립트 디렉토리로 안전 이동
        echo "🔧 V5 3단계: 스크립트 디렉토리 이동"
        cd "$SCRIPTS_PATH" || {
          echo "❌ V5 ERROR: 스크립트 디렉토리 이동 실패: $SCRIPTS_PATH"
          echo "🔍 현재 위치: $(pwd)"
          exit 1
        }
        
        echo "✅ V5 3단계 완료: 스크립트 디렉토리 이동"
        echo "📍 현재 위치: $(pwd)"
        echo "📋 스크립트 디렉토리 내용:"
        ls -la *.py
        echo ""
        
        # V5 혁신: 단계별 스크립트 실행
        echo "🎯 V5 4단계: Platform 분석 실행"
        
        # Firebase REST API 데이터 수집
        echo "🔥 Firebase 데이터 수집 중..."
        if python firebase_rest_api_fetcher.py > ../platform_output.log 2>&1; then
          echo "✅ Firebase 데이터 수집 성공"
        else
          echo "⚠️ Firebase 데이터 수집 실패 (계속 진행)"
          cat ../platform_output.log || echo "로그 없음"
        fi
        
        # 일일 비교 분석  
        echo "📊 일일 비교 분석 중..."
        if python show_daily_comparison.py >> ../platform_output.log 2>&1; then
          echo "✅ 일일 비교 분석 성공"
        else
          echo "⚠️ 일일 비교 분석 실패 (계속 진행)"
          cat ../platform_output.log || echo "로그 없음"
        fi
        
        # Slack 리포트 전송
        echo "📤 Slack 리포트 전송 중..."
        if python final_slack_reporter.py >> ../platform_output.log 2>&1; then
          echo "✅ Platform 분석 V5 완료 🎉"
          echo "🔧 V5 혁신: 경로 중복 문제 완전 근절!"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "slack_sent=true" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📋 Platform 분석 결과:"
          cat ../platform_output.log || echo "로그 파일을 읽을 수 없습니다"
        else
          echo "❌ Platform 분석 실패"
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "slack_sent=false" >> $GITHUB_OUTPUT
          
          echo "📋 Platform 에러 로그:"
          cat ../platform_output.log || echo "로그 파일을 읽을 수 없습니다"
          
          error_msg=$(cat ../platform_output.log 2>/dev/null | tail -5 || echo "Unknown error")
          echo "error_message=$error_msg" >> $GITHUB_OUTPUT
          
          exit 1
        fi
    
    - name: 📄 Upload Platform Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: platform-reports-v5-${{ needs.schedule-determination.outputs.report_type }}-${{ github.run_id }}
        path: |
          ${{ steps.smart-path-detection.outputs.working_path }}/*.json
          ${{ steps.smart-path-detection.outputs.scripts_path }}/*.json
        if-no-files-found: ignore
        retention-days: 30

  # Job 5: 최종 보고 및 정리 (V5 완전 개선)
  final-report:
    name: "📊 최종 보고 (V5 완전 개선)"
    runs-on: ubuntu-latest
    needs: [schedule-determination, pokernews-analysis, youtube-analysis, platform-analysis]
    if: always() && needs.schedule-determination.outputs.report_type != 'none'
    timeout-minutes: 5

    steps:
    - name: 📊 V5 결과 수집 및 요약
      id: summary
      run: |
        echo "📊 통합 포커 보고 시스템 V5 실행 결과"
        echo "============================================"
        echo "📅 리포트 타입: ${{ needs.schedule-determination.outputs.report_type }}"
        echo "📈 데이터 기간: ${{ needs.schedule-determination.outputs.data_period_start }} ~ ${{ needs.schedule-determination.outputs.data_period_end }}"
        echo "🏷️ 워크플로우 버전: ${{ env.WORKFLOW_VERSION }}"
        echo "🔧 V5 핵심 개선: Smart Path Detection 적용"
        echo ""
        echo "🔄 실행 결과:"
        echo "  📰 PokerNews: ${{ needs.pokernews-analysis.outputs.status || 'skipped' }}"
        echo "  🎥 YouTube: ${{ needs.youtube-analysis.outputs.status || 'skipped' }}"
        echo "  📊 Platform: ${{ needs.platform-analysis.outputs.status || 'skipped' }}"
        echo ""
        echo "📂 V5 탐지된 경로:"
        echo "  📰 PokerNews: ${{ needs.pokernews-analysis.outputs.working_path || 'N/A' }}"
        echo "  🎥 YouTube: ${{ needs.youtube-analysis.outputs.working_path || 'N/A' }}"
        echo "  📊 Platform: ${{ needs.platform-analysis.outputs.working_path || 'N/A' }}"
        echo "  📁 Scripts: ${{ needs.platform-analysis.outputs.scripts_path || 'N/A' }}"
        echo "============================================"
        
        # 성공률 계산
        SUCCESS_COUNT=0
        TOTAL_COUNT=0
        
        if [[ "${{ needs.schedule-determination.outputs.should_run_pokernews }}" == "true" ]]; then
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          [[ "${{ needs.pokernews-analysis.outputs.status }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        fi
        
        if [[ "${{ needs.schedule-determination.outputs.should_run_youtube }}" == "true" ]]; then
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          [[ "${{ needs.youtube-analysis.outputs.status }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        fi
        
        if [[ "${{ needs.schedule-determination.outputs.should_run_platform }}" == "true" ]]; then
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          [[ "${{ needs.platform-analysis.outputs.status }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        fi
        
        if [[ $TOTAL_COUNT -gt 0 ]]; then
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_COUNT))
          echo "📈 성공률: $SUCCESS_RATE% ($SUCCESS_COUNT/$TOTAL_COUNT)"
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
        else
          echo "success_rate=0" >> $GITHUB_OUTPUT
        fi
        
        # 전체 상태 결정
        if [[ $SUCCESS_COUNT -eq $TOTAL_COUNT ]] && [[ $TOTAL_COUNT -gt 0 ]]; then
          OVERALL_STATUS="✅ 완전 성공"
          echo "overall_status=success" >> $GITHUB_OUTPUT
        elif [[ $SUCCESS_COUNT -gt 0 ]]; then
          OVERALL_STATUS="⚠️ 부분 성공"
          echo "overall_status=partial_success" >> $GITHUB_OUTPUT
        else
          OVERALL_STATUS="❌ 전체 실패"
          echo "overall_status=failure" >> $GITHUB_OUTPUT
        fi
        
        echo "📊 전체 상태: $OVERALL_STATUS"

    - name: 📤 Slack 최종 보고 (V5 완전 개선)
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
          REPORT_TYPE="${{ needs.schedule-determination.outputs.report_type }}"
          DATA_START="${{ needs.schedule-determination.outputs.data_period_start }}"
          DATA_END="${{ needs.schedule-determination.outputs.data_period_end }}"
          OVERALL_STATUS="${{ steps.summary.outputs.overall_status }}"
          SUCCESS_RATE="${{ steps.summary.outputs.success_rate }}"
          COMPLETION_TIME="$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S %Z')"
          
          # V5 경로 정보 수집
          POKERNEWS_PATH="${{ needs.pokernews-analysis.outputs.working_path || 'N/A' }}"
          YOUTUBE_PATH="${{ needs.youtube-analysis.outputs.working_path || 'N/A' }}"
          PLATFORM_PATH="${{ needs.platform-analysis.outputs.working_path || 'N/A' }}"
          
          # 상태별 이모지 설정
          case $OVERALL_STATUS in
            "success")
              STATUS_EMOJI="✅"
              STATUS_TEXT="모든 분석 완료"
              STATUS_COLOR="good"
              ;;
            "partial_success")
              STATUS_EMOJI="⚠️"
              STATUS_TEXT="일부 분석 성공"
              STATUS_COLOR="warning"
              ;;
            *)
              STATUS_EMOJI="❌"
              STATUS_TEXT="분석 실패"
              STATUS_COLOR="danger"
              ;;
          esac
          
          # 개별 상태 확인
          POKERNEWS_STATUS="${{ needs.pokernews-analysis.outputs.status || 'skipped' }}"
          YOUTUBE_STATUS="${{ needs.youtube-analysis.outputs.status || 'skipped' }}"
          PLATFORM_STATUS="${{ needs.platform-analysis.outputs.status || 'skipped' }}"
          
          # 상태별 이모지 추가
          [[ "$POKERNEWS_STATUS" == "success" ]] && POKERNEWS_EMOJI="✅" || POKERNEWS_EMOJI="❌"
          [[ "$YOUTUBE_STATUS" == "success" ]] && YOUTUBE_EMOJI="✅" || YOUTUBE_EMOJI="❌"
          [[ "$PLATFORM_STATUS" == "success" ]] && PLATFORM_EMOJI="✅" || PLATFORM_EMOJI="❌"
          
          [[ "$POKERNEWS_STATUS" == "skipped" ]] && POKERNEWS_EMOJI="⏩"
          [[ "$YOUTUBE_STATUS" == "skipped" ]] && YOUTUBE_EMOJI="⏩"
          [[ "$PLATFORM_STATUS" == "skipped" ]] && PLATFORM_EMOJI="⏩"
          
          curl -X POST -H 'Content-type: application/json' \
               --data "{
                 \"blocks\": [
                   {
                     \"type\": \"header\",
                     \"text\": {
                       \"type\": \"plain_text\",
                       \"text\": \"${STATUS_EMOJI} 통합 포커 보고 시스템 완료 (V5)\",
                       \"emoji\": true
                     }
                   },
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"*📅 완료 시간:* ${COMPLETION_TIME}\\n*📊 리포트 타입:* ${REPORT_TYPE}\\n*📈 데이터 기간:* ${DATA_START} ~ ${DATA_END}\\n*🎯 전체 상태:* ${STATUS_TEXT}\\n*📊 성공률:* ${SUCCESS_RATE}%\\n*🏷️ 버전:* ${{ env.WORKFLOW_VERSION }}\\n*🔧 V5 혁신:* Smart Path Detection 적용\"
                     }
                   },
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"*📋 개별 분석 결과:*\\n${POKERNEWS_EMOJI} PokerNews: ${POKERNEWS_STATUS}\\n${YOUTUBE_EMOJI} YouTube: ${YOUTUBE_STATUS}\\n${PLATFORM_EMOJI} Platform: ${PLATFORM_STATUS}\"
                     }
                   },
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"*📂 V5 탐지된 경로:*\\n• PokerNews: \`${POKERNEWS_PATH}\`\\n• YouTube: \`${YOUTUBE_PATH}\`\\n• Platform: \`${PLATFORM_PATH}\`\"
                     }
                   },
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"*🔗 상세 결과:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions 로그 확인>\\n*🎉 V5 성과:* 경로 중복 문제 완전 근절!\"
                     }
                   }
                 ]
               }" \
               "$SLACK_WEBHOOK_URL"
        fi