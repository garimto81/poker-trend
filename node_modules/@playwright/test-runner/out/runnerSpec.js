"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.runnerSpec = void 0;
const transform_1 = require("./transform");
const runnerTest_1 = require("./runnerTest");
const util_1 = require("./util");
const spec_1 = require("./spec");
function runnerSpec(suite, timeout) {
    const suites = [suite];
    const it = (spec, fixtures, title, modifierFn, fn) => {
        const suite = suites[0];
        if (typeof fn !== 'function') {
            fn = modifierFn;
            modifierFn = null;
        }
        const test = new runnerTest_1.RunnerSpec(fixtures, title, fn, suite);
        test._usedParameters = fixtures._pool.parametersForFunction(fn, `Test`, true);
        test.file = suite.file;
        test.location = util_1.extractLocation(new Error());
        if (spec === 'only')
            test._only = true;
        test._modifierFn = (modifier, parameters) => {
            if (spec === 'skip')
                modifier.skip();
            if (!modifier._timeout)
                modifier.setTimeout(timeout);
            if (modifierFn)
                modifierFn(modifier, parameters);
        };
        return test;
    };
    const describe = (spec, fixtures, title, modifierFn, fn) => {
        if (typeof fn !== 'function') {
            fn = modifierFn;
            modifierFn = null;
        }
        const child = new runnerTest_1.RunnerSuite(fixtures, title, suites[0]);
        child.file = suite.file;
        child.location = util_1.extractLocation(new Error());
        if (spec === 'only')
            child._only = true;
        child._modifierFn = (modifier, parameters) => {
            if (spec === 'skip')
                modifier.skip();
            if (!modifier._timeout)
                modifier.setTimeout(timeout);
            if (modifierFn)
                modifierFn(modifier, parameters);
        };
        suites.unshift(child);
        fn();
        suites.shift();
    };
    const hook = (hookName, fixtures, fn) => {
        const suite = suites[0];
        if (!suite.parent)
            throw new Error(`${hookName} hook should be called inside a describe block. Consider using an auto fixture.`);
        if (suite._fixtures !== fixtures)
            throw new Error(`Using ${hookName} hook from a different fixture set.\nAre you using describe and ${hookName} from different fixture files?`);
        fixtures._pool.parametersForFunction(fn, `${hookName} hook`, hookName === 'beforeEach' || hookName === 'afterEach');
    };
    spec_1.setImplementation({
        it,
        describe,
        beforeEach: (fixtures, fn) => hook('beforeEach', fixtures, fn),
        afterEach: (fixtures, fn) => hook('afterEach', fixtures, fn),
        beforeAll: (fixtures, fn) => hook('beforeAll', fixtures, fn),
        afterAll: (fixtures, fn) => hook('afterAll', fixtures, fn),
    });
    return transform_1.installTransform();
}
exports.runnerSpec = runnerSpec;
//# sourceMappingURL=runnerSpec.js.map