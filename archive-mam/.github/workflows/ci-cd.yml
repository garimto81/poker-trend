name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 백엔드 테스트
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg tesseract-ocr tesseract-ocr-eng
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Run backend tests
      run: |
        cd test
        python test_api_endpoints.py
        python test_video_analysis.py
      env:
        REDIS_URL: redis://localhost:6379/0
    
    - name: Run performance tests
      run: |
        python test/performance_test.py
      env:
        REDIS_URL: redis://localhost:6379/0

  # 프론트엔드 테스트
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint --if-present
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan (Python)
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r src/
    
    - name: Run security scan (Node.js)
      run: |
        cd frontend
        npm audit --audit-level high

  # Docker 이미지 빌드 및 푸시
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/poker-mam-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/poker-mam-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/poker-mam-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/poker-mam-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 배포 (스테이징)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 여기에 스테이징 배포 로직 추가
        # 예: SSH를 통한 원격 서버 배포, Kubernetes 배포 등

  # 배포 (프로덕션)
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 여기에 프로덕션 배포 로직 추가

  # 알림
  notify:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        # Slack, Discord, 이메일 등 알림 전송
    
    - name: Notify on failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        # 실패 알림 전송